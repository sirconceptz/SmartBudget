// Mocks generated by Mockito 5.4.4 from annotations
// in smart_budget/test/screens/settings_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i2;

import 'package:flutter/material.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:smart_budget/data/db/database_helper.dart' as _i11;
import 'package:smart_budget/di/notifiers/currency_notifier.dart' as _i4;
import 'package:smart_budget/di/notifiers/finance_notifier.dart' as _i10;
import 'package:smart_budget/di/notifiers/locale_notifier.dart' as _i8;
import 'package:smart_budget/di/notifiers/theme_notifier.dart' as _i6;
import 'package:smart_budget/utils/enums/currency.dart' as _i5;
import 'package:sqflite/sqflite.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocale_0 extends _i1.SmartFake implements _i2.Locale {
  _FakeLocale_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_1 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CurrencyNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrencyNotifier extends _i1.Mock implements _i4.CurrencyNotifier {
  MockCurrencyNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Currency get currency => (super.noSuchMethod(
        Invocation.getter(#currency),
        returnValue: _i5.Currency.usd,
      ) as _i5.Currency);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setCurrency(_i5.Currency? currency) => super.noSuchMethod(
        Invocation.method(
          #setCurrency,
          [currency],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ThemeNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeNotifier extends _i1.Mock implements _i6.ThemeNotifier {
  MockThemeNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.ThemeMode get themeMode => (super.noSuchMethod(
        Invocation.getter(#themeMode),
        returnValue: _i7.ThemeMode.system,
      ) as _i7.ThemeMode);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setTheme(_i7.ThemeMode? themeMode) => super.noSuchMethod(
        Invocation.method(
          #setTheme,
          [themeMode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocaleNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocaleNotifier extends _i1.Mock implements _i8.LocaleNotifier {
  MockLocaleNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Locale get locale => (super.noSuchMethod(
        Invocation.getter(#locale),
        returnValue: _FakeLocale_0(
          this,
          Invocation.getter(#locale),
        ),
      ) as _i2.Locale);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> setLocale(_i2.Locale? locale) => (super.noSuchMethod(
        Invocation.method(
          #setLocale,
          [locale],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FinanceNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockFinanceNotifier extends _i1.Mock implements _i10.FinanceNotifier {
  MockFinanceNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get firstDayOfMonth => (super.noSuchMethod(
        Invocation.getter(#firstDayOfMonth),
        returnValue: 0,
      ) as int);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> loadFirstDayOfMonth() => (super.noSuchMethod(
        Invocation.method(
          #loadFirstDayOfMonth,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> setFirstDayOfMonth(int? day) => (super.noSuchMethod(
        Invocation.method(
          #setFirstDayOfMonth,
          [day],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i11.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i3.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i9.Future<_i3.Database>.value(_FakeDatabase_1(
          this,
          Invocation.getter(#database),
        )),
      ) as _i9.Future<_i3.Database>);

  @override
  _i9.Future<String> exportDatabase() => (super.noSuchMethod(
        Invocation.method(
          #exportDatabase,
          [],
        ),
        returnValue: _i9.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #exportDatabase,
            [],
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<void> importDatabase() => (super.noSuchMethod(
        Invocation.method(
          #importDatabase,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<List<Map<String, dynamic>>> query(String? table) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [table],
        ),
        returnValue: _i9.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i9.Future<List<Map<String, dynamic>>>);
}
